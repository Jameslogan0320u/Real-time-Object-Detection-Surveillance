import cv2
import time
import os
import numpy as np
import pygame
import threading
from ultralytics import YOLO
import paho.mqtt.client as mqtt

# =============================== SETTINGS =================================
MODEL_PATH = "yolov8m.pt"  # Use a larger model for better accuracy
CONFIDENCE_THRESHOLD = 0.5  # Adjust for better filtering
IOU_THRESHOLD = 0.45  # Adjust for better suppression

ROI_X, ROI_Y, ROI_W, ROI_H = 100, 100, 400, 400  # Can be dynamically adjusted

BROKER = "mqtt.eclipseprojects.io"
MQTT_TOPIC = "home/surveillance"

SNAPSHOT_DIR = "C:/surveillance/snapshots"
ALERT_COOLDOWN = 30  # Cooldown period to avoid repeated alerts

CLASSES_OF_INTEREST = [0, 2]  # 0 = person, 2 = car

OUTPUT_VIDEO_PATH = "annotated_output.avi"
FRAME_WIDTH, FRAME_HEIGHT = 1920, 1080
FPS = 20.0

ALERT_SOUND_PATH = r"insert audio to be played"  # Ensure correct path format #Ensure correct audio format
# =========================================================================


def setup_directories():
    os.makedirs(SNAPSHOT_DIR, exist_ok=True)


def setup_mqtt_client():
    client = mqtt.Client()
    try:
        client.connect(BROKER, 1883, 60)
        print("MQTT client connected successfully.")
    except Exception as e:
        print(f"Failed to connect to MQTT broker: {e}")
        exit()
    return client


def save_snapshot(frame):
    timestamp = time.strftime("%Y%m%d_%H%M%S")
    snapshot_path = os.path.join(SNAPSHOT_DIR, f"snapshot_{timestamp}.jpg")
    cv2.imwrite(snapshot_path, frame)
    print(f"Snapshot saved to {snapshot_path}")
    return snapshot_path


def play_alert_sound():
    """Plays an alert sound in a separate thread to avoid blocking the main loop."""
    try:
        pygame.mixer.init()
        pygame.mixer.music.unload()  # Unload any previous sound
        pygame.mixer.music.load(ALERT_SOUND_PATH)  # Load new sound
        pygame.mixer.music.play()
    except Exception as e:
        print(f"Error playing sound: {e}")


def trigger_audio_alert():
    """Runs play_alert_sound in a separate thread to prevent blocking the camera."""
    threading.Thread(target=play_alert_sound, daemon=True).start()


def preprocess_frame(frame):
    """Apply preprocessing steps for better object detection accuracy."""
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    equalized = cv2.equalizeHist(gray)
    blurred = cv2.GaussianBlur(equalized, (5, 5), 0)
    return cv2.cvtColor(blurred, cv2.COLOR_GRAY2BGR)


def main():
    print("Initializing Smart Surveillance System...")
    setup_directories()
    model = YOLO(MODEL_PATH)
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        print("Error: Could not open webcam.")
        exit()

    client = setup_mqtt_client()
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(OUTPUT_VIDEO_PATH, fourcc, FPS, (FRAME_WIDTH, FRAME_HEIGHT))

    log_file = open("detection_log.txt", "a")
    last_alert_time = 0

    print("Starting Smart Surveillance System... Press 'q' to stop.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to capture frame.")
            break

        # Preprocessing for better detection accuracy
        processed_frame = preprocess_frame(frame)

        # Extract ROI dynamically based on motion detection (optional)
        roi = processed_frame[ROI_Y:ROI_Y + ROI_H, ROI_X:ROI_X + ROI_W]

        # Perform object detection with confidence and IoU thresholds
        results = model(roi, conf=CONFIDENCE_THRESHOLD, iou=IOU_THRESHOLD)

        # Annotate detections
        annotated_roi = results[0].plot()
        frame[ROI_Y:ROI_Y + ROI_H, ROI_X:ROI_X + ROI_W] = annotated_roi

        # Log detections
        detected_classes = [results[0].names[int(cls)] for cls in results[0].boxes.cls.tolist()]
        if detected_classes:
            log_entry = f"{time.strftime('%Y-%m-%d %H:%M:%S')} - Detected: {detected_classes}\n"
            log_file.write(log_entry)
            print(log_entry)

        # Check for objects of interest with cooldown enforcement
        detected_ids = results[0].boxes.cls.tolist()
        if any(cls in CLASSES_OF_INTEREST for cls in detected_ids):
            if time.time() - last_alert_time > ALERT_COOLDOWN:
                print("Alert: Object of interest detected!")
                snapshot_path = save_snapshot(frame)
                client.publish(MQTT_TOPIC, f"Object detected! Snapshot: {snapshot_path}")
                trigger_audio_alert()
                last_alert_time = time.time()

        # Draw ROI rectangle
        cv2.rectangle(frame, (ROI_X, ROI_Y), (ROI_X + ROI_W, ROI_Y + ROI_H), (0, 255, 0), 2)

        # Write frame to video
        out.write(frame)

        # Display the frame
        cv2.imshow("Smart Surveillance System", frame)

        # Exit on 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    out.release()
    log_file.close()
    client.disconnect()
    cv2.destroyAllWindows()
    print("Surveillance System Stopped.")


if __name__ == "__main__":
    main()
